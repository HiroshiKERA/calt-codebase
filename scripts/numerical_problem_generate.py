from typing import List, Tuple, Any, Dict, Union
import random
import numpy as np
from sympy import primerange
from calt import DatasetGenerator, DatasetWriter, BaseStatisticsCalculator


class IntFactorProblemGenerator:
    """
    Problem generator for integer factorization problems.

    This generator creates problems in which the input is an integer n,
    and the output is a list of prime factors of n in ascending order.
    The input is generated by multiplying the output factors.
    All prime factors will be less than or equal to prime_upper_bound.
    """

    def __init__(self, prime_upper_bound: int, min_factors: int, max_factors: int):
        """
        Initialize integer factorization generator.

        Args:
            prime_upper_bound: Upper bound for selecting prime numbers (inclusive)
            min_factors: Minimum number of prime factors
            max_factors: Maximum number of prime factors
        """
        self.prime_upper_bound = prime_upper_bound
        self.min_factors = min_factors
        self.max_factors = max_factors

        self.prime_lst = list(primerange(2, self.prime_upper_bound + 1))

    def __call__(self, seed: int) -> Tuple[int, List[int]]:
        """
        Generate a single sample.

        Each sample consists of:
        - Input integer n
        - Output list of prime factors in ascending order

        Args:
            seed: Seed for random number generator

        Returns:
            Tuple containing (n, factors)
        """
        # Set random seed
        random.seed(seed)

        # Choose number of factors for this sample
        num_factors = random.randint(self.min_factors, self.max_factors)

        # Generate random prime factors
        factors = random.choices(self.prime_lst, k=num_factors)

        # Sort factors in ascending order
        factors.sort()

        # Calculate input integer by multiplying factors
        n = 1
        for p in factors:
            n *= p

        return n, factors


class NumericalStatisticsCalculator(BaseStatisticsCalculator):
    """
    Statistics calculator for polynomial problems.
    """

    def __call__(
        self,
        problem_input: Union[List[Any], Any],
        problem_output: Union[List[Any], Any],
    ) -> Dict[str, Any]:
        """
        Calculate statistics for a single generated sample.

        Args:
            problem_input: Input problem (a list of numbers or a single number)
            problem_output: Output solution (a list of numbers or a single number)

        Returns:
            Dictionary containing statistics about the sample
        """

        if isinstance(problem_input, list):
            input_stats = self.numerical_stats(problem_input)
        else:
            input_stats = self.numerical_stats([problem_input])
        if isinstance(problem_output, list):
            output_stats = self.numerical_stats(problem_output)
        else:
            output_stats = self.numerical_stats([problem_output])

        return {
            "input": input_stats,
            "output": output_stats,
        }

    def numerical_stats(self, numbers: List[Any]) -> Dict[str, Any]:
        """
        Calculate statistics for a list of numbers.

        Args:
            numbers: List of numbers

        Returns:
            Dictionary containing statistical information about the numbers
        """
        # Convert to float for calculations
        values = [float(n) for n in numbers]

        stats = {
            "num_values": len(numbers),
            "max_value": max(values),
            "min_value": min(values),
            "mean_value": float(np.mean(values)),
            "std_value": float(np.std(values)),
            "sum_value": sum(values),
        }

        return stats


def main():
    save_dir = "dataset/integer_factorization_problem"

    # Initialize problem generator
    problem_generator = IntFactorProblemGenerator(
        prime_upper_bound=100,  # All prime factors will be <= prime_upper_bound
        min_factors=2,
        max_factors=10,
    )

    # Initialize statistics calculator
    statistics_calculator = NumericalStatisticsCalculator()

    # Initialize dataset generator
    dataset_generator = DatasetGenerator(
        backend="multiprocessing",
        n_jobs=-1,
        verbose=True,
        root_seed=42,
    )

    # Generate training set
    train_samples, train_stats = dataset_generator.run(
        train=True,
        num_samples=100000,
        problem_generator=problem_generator,
        statistics_calculator=statistics_calculator,
    )

    # Generate test set
    test_samples, test_stats = dataset_generator.run(
        train=False,
        num_samples=1000,
        problem_generator=problem_generator,
        statistics_calculator=statistics_calculator,
    )

    # Initialize writer
    dataset_writer = DatasetWriter(save_dir)

    # Save datasets
    dataset_writer.save_dataset(train_samples, train_stats, "train")
    dataset_writer.save_dataset(test_samples, test_stats, "test")


if __name__ == "__main__":
    main()
