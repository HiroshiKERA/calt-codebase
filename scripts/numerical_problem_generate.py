from typing import List, Tuple
import sage.misc.randstate as randstate
from sage.misc.prandom import randint
from sage.all import ZZ, random_prime

from calt import DatasetGenerator, DatasetWriter


class IntFactorProblemGenerator:
    """
    Problem generator for integer factorization problems.
    
    This generator generates problems in which the input is an integer n,
    and the output is a list of prime factors of n in ascending order.
    The input is generated by multiplying the output factors.
    All prime factors will be less than or equal to prime_upper_bound.
    """
    def __init__(self, prime_upper_bound: int, min_factors: int, max_factors: int):
        """
        Initialize integer factorization generator.

        Args:
            prime_upper_bound: Upper bound for selecting prime numbers (inclusive)
            min_factors: Minimum number of prime factors
            max_factors: Maximum number of prime factors
        """
        self.prime_upper_bound = prime_upper_bound
        self.min_factors = min_factors
        self.max_factors = max_factors

    def __call__(self, seed: int) -> Tuple[int, List[int]]:
        """
        Generate a single sample.

        Each sample consists of:
        - Input integer n
        - Output list of prime factors in ascending order

        Args:
            seed: Seed for random number generator

        Returns:
            Tuple containing (n, factors)
        """
        # Set random seed for SageMath's random state
        randstate.set_random_seed(seed)

        # Choose number of factors for this sample
        num_factors = randint(self.min_factors, self.max_factors)

        # Generate random prime factors
        factors = [random_prime(self.prime_upper_bound) for _ in range(num_factors)]

        # Sort factors in ascending order
        factors.sort()

        # Calculate input integer by multiplying factors
        n = ZZ(1)  # Start with SageMath integer
        for p in factors:
            n *= p

        return n, factors


def main():
    save_dir = "data/integer_factorization_problem"

    # Initialize problem generator
    problem_generator = IntFactorProblemGenerator(
        prime_upper_bound=100,  # All prime factors will be <= prime_upper_bound
        min_factors=2,
        max_factors=10,
    )

    # Initialize dataset generator
    dataset_generator = DatasetGenerator(problem_type="numerical", n_jobs=-1, verbose=True, root_seed=42)

    # Generate training set
    train_samples, train_stats = dataset_generator.run(
        num_samples=100000,
        train=True,
        problem_generator=problem_generator
    )

    # Generate test set
    test_samples, test_stats = dataset_generator.run(
        num_samples=1000,
        train=False,
        problem_generator=problem_generator
    )

    # Initialize writer
    dataset_writer = DatasetWriter(save_dir)

    # Save datasets
    dataset_writer.save_dataset(train_samples, train_stats, "train")
    dataset_writer.save_dataset(test_samples, test_stats, "test")


if __name__ == "__main__":
    main() 